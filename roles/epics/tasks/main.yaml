---
- name: Ensure EPICS base directory exists
  ansible.builtin.file:
    path: "{{ epics_dir }}/base"
    state: directory
    mode: '0755'

- name: Check if EPICS Base repository is already cloned
  ansible.builtin.stat:
    path: "{{ epics_dir }}/base/.git"
  register: epics_repo_exists

- name: Install required packages on Debian-based systems
  ansible.builtin.package:
    name:
      - build-essential
      - git
      - libreadline-dev
      - libncurses5-dev
      - re2c # for seq
      - libc-dev-bin # asyn
      - libxml2-dev # for areadetector
      - libboost-all-dev # for areadetector
      - libhdf5-dev # for areadetector
#      - libdbd-dev
      - libntirpc-dev  # async rpc.h
    state: present
  become: true
  when: ansible_os_family == "Debian"

- name: Install required packages on Red Hat-based systems
  ansible.builtin.package:
    name:
      - gcc
      - gcc-c++
      - git
      - readline-devel
      - ncurses-devel
      - rpcgen # for asyn
      - libxml2-devel # for areadetector
      - boost-devel # for areadetector
      - hdf5-devel # for areadetector
      - re2c # for seq
#      - libdb-devel
#      - libtirpc-devel # for asyn rpc.h
    state: present
  become: true
  when: ansible_os_family == "RedHat"

- name: Clone EPICS Base repository varsion {{ epics_version }}
  ansible.builtin.git:
    repo: "https://github.com/epics-base/epics-base.git"
    dest: "{{ epics_dir }}/base"
    version: "{{ epics_version }}"
  when: not epics_repo_exists.stat.exists

- name: Check if EPICS Base bin directory exists
  ansible.builtin.stat:
    path: "{{ epics_dir }}/base/bin"
  register: epics_bin_exists

- name: Compile EPICS Base
  ansible.builtin.shell: |
    make
  args:
    chdir: "{{ epics_dir }}/base"
  when: not epics_bin_exists.stat.exists

- name: Detect EPICS_HOST_ARCH
  ansible.builtin.command: "{{ epics_dir }}/base/startup/EpicsHostArch"
  register: epics_host_arch_result
  environment:
    EPICS_BASE: "{{ epics_dir }}/base"
  changed_when: false

- name: Set EPICS_HOST_ARCH variable
  ansible.builtin.set_fact:
    epics_host_arch: "{{ epics_host_arch_result.stdout }}"

- name: Ensure EPICS_HOST_ARCH is available
  ansible.builtin.debug:
    msg: "Detected EPICS_HOST_ARCH: {{ epics_host_arch }}"

- name: Copy environment variables template
  ansible.builtin.template:
    src: epics_env.j2
    dest: "{{ env_location }}/epics_env.sh"
    mode: '0644'

- name: Source EPICS environment
  ansible.builtin.shell: "source {{ env_location }}/epics_env.sh"
  args:
    executable: /bin/bash

# Add modules below
- name: Install modules
  ansible.builtin.include_tasks: "install_{{ item.key }}.yml"
  loop: "{{ install_modules | dict2items}}"

- name: Install areadetector 
  ansible.builtin.include_tasks: install_areadetector.yml
  when: areadetector_version
